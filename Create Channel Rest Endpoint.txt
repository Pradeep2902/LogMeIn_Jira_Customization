import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate // Importing the required classes

import groovy.json.JsonOutput 

import groovy.json.*

import groovy.transform.BaseScript 

import javax.ws.rs.core.MultivaluedMap 

import javax.ws.rs.core.Response 

import groovy.json.JsonSlurper; 
	
import java.util.ArrayList;



import com.atlassian.jira.issue.IssueInputParameters 

import groovy.json.StreamingJsonBuilder;  

import com.atlassian.jira.issue.CustomFieldManager;  

import com.onresolve.scriptrunner.runner.util.UserMessageUtil;

import com.atlassian.jira.issue.fields.CustomField;  

import com.atlassian.jira.issue.IssueManager;  
 
import com.atlassian.jira.component.ComponentAccessor;  

import com.atlassian.jira.issue.Issue;  

import com.atlassian.jira.issue.MutableIssue  

import org.apache.commons.codec.binary.Base64;  

import groovyx.net.http.HTTPBuilder  

import static groovyx.net.http.ContentType.*  

import groovyx.net.http.ContentType  

import static groovyx.net.http.Method.*  

import groovy.json.JsonSlurper  

import groovy.json.JsonBuilder  

import net.sf.json.groovy.JsonSlurper  

import groovy.json.JsonOutput  

import com.atlassian.jira.issue.MutableIssue  

import com.atlassian.jira.event.type.EventDispatchOption  

import java.net.URLEncoder;

import javax.ws.rs.core.MediaType

import com.atlassian.sal.api.ApplicationProperties
import com.atlassian.sal.api.UrlMode
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import com.onresolve.scriptrunner.runner.util.UserMessageUtil
import groovy.transform.BaseScript   

import com.onresolve.scriptrunner.runner.util.UserMessageUtil

@BaseScript CustomEndpointDelegate delegate 
createChannel(httpMethod: "GET") { MultivaluedMap queryParams ->    
String clientId="0d7992c9-0b6a-4c31-bc13-1fe808cd92ac"  // Provide the appropriate Client ID here
String clienSecret ="hsFF8tKFzRp0vM.F33.vkST9_SqxiA~5U~";// Provide the appropriate Client Seceret here  
String tenantId="658e9c54-722b-4a2f-b579-2e48c03f8d55"; // Provide the appropriate Tenant ID here
String teamId = "42d54850-0539-4979-b3fb-efdea6dec724"; // Provide the appropriate Team ID here
def issueManager = ComponentAccessor.getIssueManager() 
def issueId = queryParams.getFirst("issueId") as long // getting the Issue Id from the query Params   
Issue issue = issueManager.getIssueObject(issueId) 
String issueKey=issue.key;
def projectKey=issueKey.split("-");
log.warn("The issue ID"+issueId) 
log.warn("The issue ID"+projectKey[0])  
String issueSummary= issue.getSummary().toString();;  
issueSummary = issueSummary.replaceAll("[~#%&*{}+/:<>?|'\".]","_");// replacing the following special characters with "_"   
issueSummary = issueSummary.replace('\\','_'); // Replacing "\" with "_"

//---------------------------------------------------------Generating the Bearer Token--------------------------------------------------// 
 
def accessBody = "grant_type=client_credentials&client_id="+clientId+"&scope=https://graph.microsoft.com/.default&client_secret="+clienSecret
def tokenBaseUrl = "https://login.microsoftonline.com/"+tenantId+"/oauth2/v2.0/token" 
URL accessTokenUrl = new URL(tokenBaseUrl);  
HttpURLConnection tokenConnection = accessTokenUrl.openConnection() as HttpURLConnection;  
tokenConnection.requestMethod = "POST"  
tokenConnection.doOutput = true  
tokenConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")  
def jsonObject; 
try  
{ 
    OutputStream os = tokenConnection.getOutputStream() 
    byte[] input = accessBody.getBytes("utf-8"); 
    os.write(input, 0, input.length);	 
    tokenConnection.connect(); 
} 
catch(Exception ex){ 
    log.warn(ex.toString()); 
} 
try { // Reading the Response
    BufferedReader tokenBufferReader = new BufferedReader( 
    new InputStreamReader(tokenConnection.getInputStream(), "utf-8")) 
    StringBuilder tokenResponse = new StringBuilder(); 
    String tokenResponseLine = null; 
    while ((tokenResponseLine = tokenBufferReader.readLine()) != null) { //appending the response tto the StringBuilder object
    tokenResponse.append(tokenResponseLine.trim()); 
    } 
    def jsonSlurper = new JsonSlurper() //Parsing the Json to get the access token
 	jsonObject = jsonSlurper.parseText(tokenResponse.toString()) 
    assert jsonObject instanceof Map   
    log.warn(jsonObject.access_token) 
    log.warn(tokenResponse.toString()); 
} 
catch(Exception ex){ 
    log.warn(ex.toString()) 
} 
def bearerToken = jsonObject.access_token.toString()  
log.warn(bearerToken);

// --------------------------------------Creating Channel------------------------------------------------------------------// 
String displayName=issue.key+" - "+issueSummary; 
//String displayName="jira"+"-"+issue.key; 
if(displayName.length() > 50 ){//Checking whether the character count of issue key and issue summary doesnot exceed 50
    displayName = displayName.substring(0, 50);
}

String channelBody = "{\"displayName\": \""+displayName+"\",\"description\": \"\",\"membershipType\": \"standard\"}"
def channelBaseURL = "https://graph.microsoft.com/v1.0/teams/"+teamId+"/channels" 
String channelMessage;
URL channelUrl = new URL(channelBaseURL);
HttpURLConnection channelConnection = channelUrl.openConnection() as HttpURLConnection;     
channelConnection.requestMethod = "POST"     
channelConnection.doOutput = true   
channelConnection.setRequestProperty("Authorization","Bearer " + bearerToken);  
channelConnection.setRequestProperty("Content-Type", "application/json;charset=UTF-8") 
channelConnection.setRequestProperty("Accept", "application/json") 
channelConnection.outputStream   
try{OutputStream os = channelConnection.getOutputStream();
        os.write(channelBody.getBytes());
        os.flush();

channelConnection.connect();}
catch(Exception ex){ 
    log.warn(ex.toString()) 
}
if (channelConnection.getResponseCode() >= 200 && channelConnection.getResponseCode() < 400) {//Displaying the Success message to the user upon creating the channel successfully
    UserMessageUtil.success('Channel Created ')
    def applicationProperties = ScriptRunnerImpl.getOsgiService(ApplicationProperties)
    def baseUrl = applicationProperties.getBaseUrl(UrlMode.ABSOLUTE)
    Response.temporaryRedirect(URI.create("${baseUrl}/projects/"+projectKey[0]+"/issues/"+issue.key+"?filter=allopenissues")).build()
} 
    else if(channelConnection.getResponseCode() >= 400){//Checking whether the team has reached the maximum number of channels
	try{  
     BufferedReader assigneeBuffer = new BufferedReader(new InputStreamReader(channelConnection.getErrorStream()));
                StringBuilder assigneeBuilder = new StringBuilder();
                String assigneeLine;
                while ((assigneeLine = assigneeBuffer.readLine()) != null) {//appending the response tto the StringBuilder object
                    assigneeBuilder.append(assigneeLine+"\n");
                }
                assigneeBuffer.close();              
    			String errorMessage=assigneeBuilder.toString();
            	if(errorMessage.contains("This team has exceeded the Max allowed channels")){
                UserMessageUtil.error("This team has exceeded the Max allowed channels")// displaying the error message for maximum limit exceeded
                def applicationProperties = ScriptRunnerImpl.getOsgiService(ApplicationProperties)
                def baseUrl = applicationProperties.getBaseUrl(UrlMode.ABSOLUTE)
                Response.temporaryRedirect(URI.create("${baseUrl}/projects/"+projectKey[0]+"/issues/"+issue.key+"?filter=allopenissues")).build()
            	}
    			else{
                UserMessageUtil.error("Oops Channel not created !!!")// displaying the error message
                def applicationProperties = ScriptRunnerImpl.getOsgiService(ApplicationProperties)
                def baseUrl = applicationProperties.getBaseUrl(UrlMode.ABSOLUTE)
                Response.temporaryRedirect(URI.create("${baseUrl}/projects/"+projectKey[0]+"/issues/"+issue.key+"?filter=allopenissues")).build()
    			}
}
        catch(Exception ex){
            log.warn(ex.toString())
        	}
            }
        
    }
    

