import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate // Importing the required classes

import groovy.json.JsonOutput 

import groovy.json.*

import groovy.transform.BaseScript 

import javax.ws.rs.core.MultivaluedMap 

import javax.ws.rs.core.Response 

import groovy.json.JsonSlurper; 
	
import java.util.ArrayList;

import com.atlassian.jira.issue.IssueInputParameters 

import groovy.json.StreamingJsonBuilder;  

import com.atlassian.jira.issue.CustomFieldManager;  

import com.onresolve.scriptrunner.runner.util.UserMessageUtil;

import com.atlassian.jira.issue.fields.CustomField;  

import com.atlassian.jira.issue.IssueManager;  
 
import com.atlassian.jira.component.ComponentAccessor;  

import com.atlassian.jira.issue.Issue;  

import com.atlassian.jira.issue.MutableIssue  

import org.apache.commons.codec.binary.Base64;  

import groovyx.net.http.HTTPBuilder  

import static groovyx.net.http.ContentType.*  

import groovyx.net.http.ContentType  

import static groovyx.net.http.Method.*  

import groovy.json.JsonSlurper  

import groovy.json.JsonBuilder  

import net.sf.json.groovy.JsonSlurper  

import groovy.json.JsonOutput  

import com.atlassian.jira.issue.MutableIssue  

import com.atlassian.jira.event.type.EventDispatchOption  

import java.net.URLEncoder;

import javax.ws.rs.core.MediaType

import com.atlassian.sal.api.ApplicationProperties
import com.atlassian.sal.api.UrlMode
import com.onresolve.scriptrunner.runner.ScriptRunnerImpl
import com.onresolve.scriptrunner.runner.rest.common.CustomEndpointDelegate
import com.onresolve.scriptrunner.runner.util.UserMessageUtil
import groovy.transform.BaseScript   

import com.onresolve.scriptrunner.runner.util.UserMessageUtil

@BaseScript CustomEndpointDelegate delegate

visitChannel(httpMethod: "GET") { MultivaluedMap queryParams->
String clientId="0d7992c9-0b6a-4c31-bc13-1fe808cd92ac"  // Provide the appropriate Client ID here
String clienSecret ="hsFF8tKFzRp0vM.F33.vkST9_SqxiA~5U~";// Provide the appropriate Client Seceret here  
String tenantId="658e9c54-722b-4a2f-b579-2e48c03f8d55"; // Provide the appropriate Tenant ID here
String teamId = "42d54850-0539-4979-b3fb-efdea6dec724"; // Provide the appropriate Team ID here
def issueManager = ComponentAccessor.getIssueManager() 
def issueId = queryParams.getFirst("issueId") as long // getting the Issue Id from the query Params   
Issue issue = issueManager.getIssueObject(issueId) 
String issueKey=issue.key;
def projectKey=issueKey.split("-");
log.warn("The issue ID"+issueId) 
log.warn("The issue ID"+projectKey[0])   
String issueSummary= issue.summary.toString();  
issueSummary = issueSummary.replaceAll("[~#%&*{}+/:<>?|'\".]","_")  ;//Replacing the following special characters with "_"
issueSummary = issueSummary.replace('\\','_'); // Replacing "\" with "_"

//-------------------------------------------------------Generating Bearer Token-----------------------------------------------------------
def accessBody = "grant_type=client_credentials&client_id="+clientId+"&scope=https://graph.microsoft.com/.default&client_secret="+clienSecret
def tokenBaseUrl = "https://login.microsoftonline.com/"+tenantId+"/oauth2/v2.0/token" 
URL accessTokenUrl = new URL(tokenBaseUrl);  
HttpURLConnection tokenConnection = accessTokenUrl.openConnection() as HttpURLConnection;  
tokenConnection.requestMethod = "POST"  
tokenConnection.doOutput = true  
tokenConnection.setRequestProperty("Content-Type", "application/x-www-form-urlencoded")  
def jsonObject; 
    try{ OutputStream os = tokenConnection.getOutputStream() 
    byte[] input = accessBody.getBytes("utf-8"); 
    os.write(input, 0, input.length);	 
    tokenConnection.connect();
  
    BufferedReader tokenBufferReader = new BufferedReader( 
    new InputStreamReader(tokenConnection.getInputStream(), "utf-8")) 
    StringBuilder tokenResponse = new StringBuilder(); 
    String tokenResponseLine = null; 
    while ((tokenResponseLine = tokenBufferReader.readLine()) != null) { 
    tokenResponse.append(tokenResponseLine.trim()); 
    } 
    def jsonSlurper = new JsonSlurper() //Parsing the Json to get the access Token
 	jsonObject = jsonSlurper.parseText(tokenResponse.toString()) 
    assert jsonObject instanceof Map   
     }
    catch(Exception ex){
        log.warn(ex.toString())
    }
 
def bearerToken = jsonObject.access_token.toString()  

//------------------------------------------------------------- Getting Channel-----------------------------------------------------//              
String displayName=issue.key+" - "+issueSummary;  
//String displayName="jira"+"-"+issue.key;   
log.warn(displayName)  
if(displayName.length() > 50 ){// Checking whether the character count of issue key and issue summary exceeds 50
    displayName = displayName.substring(0, 50);
}
def getChannelUrl = "https://graph.microsoft.com/v1.0/teams/"+teamId+"/channels?\$filter=displayName eq '"+displayName+"'";
def channeljsonObject; 
String stringResponse;
URL objGetchannel = new URL(getChannelUrl.replace(" ", "%20"));//replacing the white spaces with "%20"
  HttpURLConnection objGetChannelConnection = (HttpURLConnection) objGetchannel.openConnection();
   objGetChannelConnection.setRequestMethod("GET");
   objGetChannelConnection.doOutput = true ;
   objGetChannelConnection.setRequestProperty("Authorization","Bearer " + bearerToken);
   objGetChannelConnection.setRequestProperty("Content-Type","application/json");
   objGetChannelConnection.setRequestProperty("Accept","application/json");
    try{objGetChannelConnection.connect();
   
   BufferedReader objChannelBuffer = new BufferedReader(new InputStreamReader(objGetChannelConnection.getInputStream()));
                StringBuilder channelBuilder = new StringBuilder();
                String channelLine;      
                while ((channelLine = objChannelBuffer.readLine()) != null) {//Appending the response to the StringBuilder object
                    channelBuilder.append(channelLine+"\n");             
                }
                objChannelBuffer.close();       
       			String channelUrl = channelBuilder.toString();
                def channelSplit = channelUrl.split("webUrl\":\"");
                String channelWebUrl=channelSplit[1]
                def channelRedirectUrl=channelWebUrl.split("\""); //Getting the Web url for the channel
    		    Response.temporaryRedirect(URI.createchannelRedirectUrl=channelWebUrl.split[0].toString())).build() }// redirecting the Jira issue page to the channel
    catch(Exception ex){
        log.warn(ex.toString())
    }
   
    
}


    



